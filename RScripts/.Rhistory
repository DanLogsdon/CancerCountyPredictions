)
server <- function(input, output, session) {
levelCancer <- c("Missing",1,2,3,4,5) # legend color palette
pal <- colorFactor(
palette = c('#cccccc', # missing color is grey
'#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026'), # 1 - 5 in red color scale
levels = levelCancer)
labels <- sprintf( # design element for mouse-over pop-up label
"<strong>%s</strong><br/>",
shapes$NAME
) %>% lapply(htmltools::HTML)
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
)
output$CAmap <- renderLeaflet({allMap}) # the main map
observeEvent(input$CAmap_shape_click, { # user's choice of county returns the county map and name
click <- input$CAmap_shape_click
eachCounty <- leaflet(data = shapes[which(shapes$layerId == click$id),]) %>%
addPolygons(fillColor = ~pal(Cancer), weight = 2, opacity = 1,
color = "white", dashArray = "3", fillOpacity = 0.7)
output$countyName <- renderText({click$id}) # county name in the format of "State, County"
output$countyMap <- renderLeaflet({eachCounty}) # county map
updated <- read.csv("Data/rdata_updated.csv", stringsAsFactors = F) %>%
mutate(FIPS = as.character(FIPS))
reactive({
updateSliderInput(session, "pm",
value = updated$a_pm25_mean[which(updated$FIPS == shapes$GEOID)])
})
})
}
# Run
shinyApp(ui, server)
View(test)
updated <- read.csv("Data/rdata_updated.csv", stringsAsFactors = F) %>%
mutate(FIPS = as.character(FIPS))
shapes$layerId[1]
server <- function(input, output, session) {
levelCancer <- c("Missing",1,2,3,4,5) # legend color palette
pal <- colorFactor(
palette = c('#cccccc', # missing color is grey
'#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026'), # 1 - 5 in red color scale
levels = levelCancer)
labels <- sprintf( # design element for mouse-over pop-up label
"<strong>%s</strong><br/>",
shapes$NAME
) %>% lapply(htmltools::HTML)
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
)
output$CAmap <- renderLeaflet({allMap}) # the main map
observeEvent(input$CAmap_shape_click, { # user's choice of county returns the county map and name
click <- input$CAmap_shape_click
eachCounty <- leaflet(data = shapes[which(shapes$layerId == click$id),]) %>%
addPolygons(fillColor = ~pal(Cancer), weight = 2, opacity = 1,
color = "white", dashArray = "3", fillOpacity = 0.7)
output$countyName <- renderText({click$id}) # county name in the format of "State, County"
output$countyMap <- renderLeaflet({eachCounty}) # county map
updated <- read.csv("Data/rdata_updated.csv", stringsAsFactors = F) %>%
mutate(FIPS = as.character(FIPS))
output$pm <- renderUI({
updateSliderInput("pm",
value = updated$a_pm25_mean[which(updated$FIPS == shapes$GEOID)])
})
})
}
# Run
shinyApp(ui, server)
updated$a_pm25_mean[5]
View(test)
server <- function(input, output, session) {
levelCancer <- c("Missing",1,2,3,4,5) # legend color palette
pal <- colorFactor(
palette = c('#cccccc', # missing color is grey
'#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026'), # 1 - 5 in red color scale
levels = levelCancer)
labels <- sprintf( # design element for mouse-over pop-up label
"<strong>%s</strong><br/>",
shapes$NAME
) %>% lapply(htmltools::HTML)
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
)
output$CAmap <- renderLeaflet({allMap}) # the main map
observeEvent(input$CAmap_shape_click, { # user's choice of county returns the county map and name
click <- input$CAmap_shape_click
eachCounty <- leaflet(data = shapes[which(shapes$layerId == click$id),]) %>%
addPolygons(fillColor = ~pal(Cancer), weight = 2, opacity = 1,
color = "white", dashArray = "3", fillOpacity = 0.7)
output$countyName <- renderText({click$id}) # county name in the format of "State, County"
output$countyMap <- renderLeaflet({eachCounty}) # county map
updated <- read.csv("Data/rdata_updated.csv", stringsAsFactors = F) %>%
mutate(FIPS = as.character(FIPS))
updated$name <- gsub(",", ", ", updated$name) %>%
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", ., perl = T)
updateSliderInput(session, "pm",
value = updated$a_pm25_mean[which(updated$name == click$id)])
})
}
# Run
shinyApp(ui, server)
ui <- fluidPage(
#tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
title = "Total Exposure on Cancer Visualization",
leafletOutput("CAmap", width = "100%", height = "400px"), # main map
fluidRow(
column(2,
h4("Description and Guideline"), # dropdown menu to choose type of cancer
h5("1. Click on any county."),
h5("2. Control the values from the sliders.")
),
column(4,
h4(paste0("Selected County", ": ")),
textOutput("countyName"), # selected county name
leafletOutput("countyMap", width = "100%", height = "250px") # selected county map
),
column(3,
h4("Change Variables"), # 3 sliders
sliderInput("smoking",
label = "Smoking Level:",
min = 0, max = 10, value = 1, step=1),
sliderInput("diabetes",
label = "Diabetes:",
min = 0, max = 10, value = 1, step=1),
sliderInput("pm",
label = "PM 2.5 Level:",
min = 0, max = 10, value = 1, step=1)
),
column(3,
h4("Change Variables"), # 3 sliders
sliderInput("obesity",
label = "Obesity:",
min = 0, max = 10, value = 1, step=1),
sliderInput("phys",
label = "Physical Inactivity:",
min = 0, max = 10, value = 1, step=1)
)
)
)
server <- function(input, output, session) {
levelCancer <- c("Missing",1,2,3,4,5) # legend color palette
pal <- colorFactor(
palette = c('#cccccc', # missing color is grey
'#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026'), # 1 - 5 in red color scale
levels = levelCancer)
labels <- sprintf( # design element for mouse-over pop-up label
"<strong>%s</strong><br/>",
shapes$NAME
) %>% lapply(htmltools::HTML)
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
)
output$CAmap <- renderLeaflet({allMap}) # the main map
observeEvent(input$CAmap_shape_click, { # user's choice of county returns the county map and name
click <- input$CAmap_shape_click
eachCounty <- leaflet(data = shapes[which(shapes$layerId == click$id),]) %>%
addPolygons(fillColor = ~pal(Cancer), weight = 2, opacity = 1,
color = "white", dashArray = "3", fillOpacity = 0.7)
output$countyName <- renderText({click$id}) # county name in the format of "State, County"
output$countyMap <- renderLeaflet({eachCounty}) # county map
updated <- read.csv("Data/rdata_updated.csv", stringsAsFactors = F) %>%
mutate(FIPS = as.character(FIPS))
updated$name <- gsub(",", ", ", updated$name) %>% # TERRIBLY INEFFICIENT - FIX WHEN POSSIBLE
gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", ., perl = T)
updateSliderInput(session, "smoking",
value = updated$Adult_Smoking[which(updated$name == click$id)])
updateSliderInput(session, "diabetes",
value = updated$Diabetes_Value[which(updated$name == click$id)])
updateSliderInput(session, "pm",
value = updated$a_pm25_mean[which(updated$name == click$id)])
updateSliderInput(session, "obesity",
value = updated$Adult_Obesity[which(updated$name == click$id)])
updateSliderInput(session, "phys",
value = updated$Physical_Inactivity[which(updated$name == click$id)])
})
}
# Run
shinyApp(ui, server)
leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
) %>% addLayersControl(
overlayGroups = levelCancer,
options = layersControlOptions(collapsed = F))
leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
) %>% addLayersControl(
overlayGroups = levelCancer,
options = layersControlOptions(collapsed = F))
levelCancer <- c("Missing",1,2,3,4,5) # legend color palette
pal <- colorFactor(
palette = c('#cccccc', # missing color is grey
'#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026'), # 1 - 5 in red color scale
levels = levelCancer)
labels <- sprintf( # design element for mouse-over pop-up label
"<strong>%s</strong><br/>",
shapes$NAME
) %>% lapply(htmltools::HTML)
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
) %>% addLayersControl(
overlayGroups = levelCancer,
options = layersControlOptions(collapsed = F))
allMap
leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>% addPolygons(
fillColor = ~pal(Cancer), weight = 1, opacity = 1, color = "white",
dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
layerId = shapes$layerId
) %>% addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright"
) %>% addLayersControl(
overlayGroups = levelCancer,
options = layersControlOptions(collapsed = F))[[1]][1]
which(shapes$Cancer_Incidence == 1)
head(shapes)
which(shapes$Cancer == 1)
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>%
# overlay group 1
addPolygons(data = shapes[which(shapes$Cancer == 1),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "1") %>%
# overlay group 2
addPolygons(data = shapes[which(shapes$Cancer == 2),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "2") %>%
# overlay group 3
addPolygons(data = shapes[which(shapes$Cancer == 3),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "3") %>%
# overlay group 4
addPolygons(data = shapes[which(shapes$Cancer == 4),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "4") %>%
# overlay group 5
addPolygons(data = shapes[which(shapes$Cancer == 5),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "5") %>%
# overlay group 0
addPolygons(data = shapes[which(shapes$Cancer == 0),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "Missing") %>%
addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright") %>%
addLayersControl(
overlayGroups = c("1", "2", "3", "4", "5", "Missing"),
options = layersControlOptions(collapsed = F))
allMap
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>%
# overlay group 1
addPolygons(data = shapes[which(shapes$Cancer == 1),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "1") %>%
# overlay group 2
addPolygons(data = shapes[which(shapes$Cancer == 2),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "2") %>%
# overlay group 3
addPolygons(data = shapes[which(shapes$Cancer == 3),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "3") %>%
# overlay group 4
addPolygons(data = shapes[which(shapes$Cancer == 4),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "4") %>%
# overlay group 5
addPolygons(data = shapes[which(shapes$Cancer == 5),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "High") %>%
# overlay group 0
addPolygons(data = shapes[which(shapes$Cancer == 0),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "Missing") %>%
addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright") %>%
addLayersControl(
overlayGroups = c("1", "2", "3", "4", "High", "Missing"),
options = layersControlOptions(collapsed = F))
leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>%
# overlay group 1
addPolygons(data = shapes[which(shapes$Cancer == 1),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "1") %>%
# overlay group 2
addPolygons(data = shapes[which(shapes$Cancer == 2),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "2") %>%
# overlay group 3
addPolygons(data = shapes[which(shapes$Cancer == 3),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "3") %>%
# overlay group 4
addPolygons(data = shapes[which(shapes$Cancer == 4),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "4") %>%
# overlay group 5
addPolygons(data = shapes[which(shapes$Cancer == 5),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "High") %>%
# overlay group 0
addPolygons(data = shapes[which(shapes$Cancer == 0),], fillColor = ~pal(Cancer),weight = 1, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto"),
layerId = shapes$layerId,
group = "Missing") %>%
addLegend(
pal = pal, values = ~levelCancer, opacity = 0.7, title = "Cancer Likelihood",
position = "bottomright") %>%
addLayersControl(
overlayGroups = c("1", "2", "3", "4", "High", "Missing"),
options = layersControlOptions(collapsed = F))
allMap <- leaflet(data = shapes) %>% # the main map frame
addTiles() %>% setView(-100, 38, 4) %>%
addPolygons(fillColor = ~pal(Cancer),weight = 1, opacity = 1,
color = "white", dashArray = "3", fillOpacity = 0.7,
highlight = highlightOptions(weight = 5, color = "#666",
dashArray = "", fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"),
layerId = shapes$layerId) %>%
addLegend(pal = pal, values = ~levelCancer, opacity = 0.7,
title = "Cancer Likelihood", position = "bottomright")
allMap
